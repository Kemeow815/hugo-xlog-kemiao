[{"content":"本文提供了一个可以在 Hugo 内容文件中使用的基本 Markdown 语法示例，还展示了基本 HTML 元素是否在 Hugo 主题中使用 CSS 进行修饰。\n标题 下面的 HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; 元素代表了六个级别的章节标题。 \u0026lt;h1\u0026gt; 是最高的部分级别，而 \u0026lt;h6\u0026gt; 是最低的。\n一级标题 二级标题 三级标题 四级标题 五级标题 六级标题 段落 Xerum，我可以和他解释谁在痛苦中。 当我来到你身边，当我充满快乐时，我被快乐所折磨，或者他是天生的，或者是一个骗子，因为那个让我快乐痛苦的人是事情的专家，或者他撕裂和撕破自己的意志，仿佛他值得被遮盖，他是不是走到了心坎上，以同样的心去追随同样的事情？ 为什么毛孔会竖起来，当它被放置在一个不知道老鼠意志或一切的地方时？ 我会安静的。 就我而言，我的心以一种或另一种方式受到干扰，我把它们撕下来擦干，这样我要么杀了它们，要么让它们逃跑。 他憎恨真相，因为 veliamenim 的浪潮是起因和面子本身，而版本的痛苦又重演了。\n是旅行吗？ 因为每一件事都有一些你讨厌或讨厌的东西，所以你会吃东西，以免让你的智慧隐藏这样一个事实，即心脏和心脏或有趣的东西会从中出来。\n块引用 blockquote 元素表示从另一个来源引用的内容，可选地带有必须在“footer”或“cite”元素内的引用，以及可选的内联更改，例如注释和缩写。\n不注明出处的块引用 然后，为了铸币安德普，要给予的知识相应地减少。 注意您可以在块引用中使用 Markdown 语法。\n带出处的块引用 不要通过共享内存来通信，通过通信来共享内存。 — Rob Pike1\n表格 表格不是核心 Markdown 规范的一部分，但 Hugo 支持开箱即用地支持它们。\n姓名 年龄 小明 27 大壮 23 表格内的内联 Markdown 斜体 粗体 代码 斜体 粗体 code 代码块 不使用高亮的代码块 \u0026lt;!doctype html\u0026gt;\r\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; HTML 的代码块 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Go 的代码块 type Registry interface { Register(*Service, ...RegisterOption) error Deregister(*Service, ...DeregisterOption) error List(string, ...ListOption) ([]*Service, error) } C艹 的代码块 #include \u0026lt;iostream\u0026gt; class Animal { string name; public: void eat(); } void Animal::eat() { std::cout \u0026lt;\u0026lt; \u0026#34;eat something\u0026#34; \u0026lt;\u0026lt; std::endl; } Jvav 的代码块 class Animal { void speak() { /* speak */ } } class Dog extends Animal { @override void speak() { /* bark */ } } class Cat extends Animal { @override void speak() { /* mew */ } } Python 的代码块 class Dog(Animal): def __init__(self): super.__init__() def eat(): pass 列表类型 有序列表 第一项 第二项 第三项 已勾选 未勾选 无序列表 第一项 另一项 另另一项 嵌套列表 水果 苹果 橘子 香蕉 乳制品 牛奶 奶酪 上述引述摘自 Rob Pike 在 2015 年 11 月 18 日 Gopherfest 期间的 talk。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://www.kemiaofx.cn/posts/markdown-syntax/","summary":"\u003cp\u003e本文提供了一个可以在 Hugo 内容文件中使用的基本 Markdown 语法示例，还展示了基本 HTML 元素是否在 Hugo 主题中使用 CSS 进行修饰。\u003c/p\u003e","title":"Markdown 语法指北"},{"content":"Examples The following are some examples of the diagrams, charts and graphs that can be made using Mermaid. Click here to jump into the full syntax.\nFlowchart flowchart LR\rA[Hard] --\u0026gt;|Text| B(Round)\rB --\u0026gt; C{Decision}\rC --\u0026gt;|One| D[Result 1]\rC --\u0026gt;|Two| E[Result 2] will be rendered as:\nflowchart LR\rA[Hard] --\u0026gt;|Text| B(Round)\rB --\u0026gt; C{Decision}\rC --\u0026gt;|One| D[Result 1]\rC --\u0026gt;|Two| E[Result 2] Sequence diagram sequenceDiagram\rAlice-\u0026gt;\u0026gt;John: Hello John, how are you?\rloop Healthcheck\rJohn-\u0026gt;\u0026gt;John: Fight against hypochondria\rend\rNote right of John: Rational thoughts!\rJohn--\u0026gt;\u0026gt;Alice: Great!\rJohn-\u0026gt;\u0026gt;Bob: How about you?\rBob--\u0026gt;\u0026gt;John: Jolly good! will be rendered as:\nsequenceDiagram\rAlice-\u0026gt;\u0026gt;John: Hello John, how are you?\rloop Healthcheck\rJohn-\u0026gt;\u0026gt;John: Fight against hypochondria\rend\rNote right of John: Rational thoughts!\rJohn--\u0026gt;\u0026gt;Alice: Great!\rJohn-\u0026gt;\u0026gt;Bob: How about you?\rBob--\u0026gt;\u0026gt;John: Jolly good! Gantt chart gantt\rsection Section\rCompleted :done, des1, 2014-01-06,2014-01-08\rActive :active, des2, 2014-01-07, 3d\rParallel 1 : des3, after des1, 1d\rParallel 2 : des4, after des1, 1d\rParallel 3 : des5, after des3, 1d\rParallel 4 : des6, after des4, 1d will be rendered as:\ngantt\rsection Section\rCompleted :done, des1, 2014-01-06,2014-01-08\rActive :active, des2, 2014-01-07, 3d\rParallel 1 : des3, after des1, 1d\rParallel 2 : des4, after des1, 1d\rParallel 3 : des5, after des3, 1d\rParallel 4 : des6, after des4, 1d Class diagram classDiagram\rClass01 \u0026lt;|-- AveryLongClass : Cool\r\u0026lt;\u0026lt;Interface\u0026gt;\u0026gt; Class01\rClass09 --\u0026gt; C2 : Where am I?\rClass09 --* C3\rClass09 --|\u0026gt; Class07\rClass07 : equals()\rClass07 : Object[] elementData\rClass01 : size()\rClass01 : int chimp\rClass01 : int gorilla\rclass Class10 {\r\u0026lt;\u0026lt;service\u0026gt;\u0026gt;\rint id\rsize()\r} will be rendered as:\nclassDiagram\rClass01 \u0026lt;|-- AveryLongClass : Cool\r\u0026lt;\u0026lt;Interface\u0026gt;\u0026gt; Class01\rClass09 --\u0026gt; C2 : Where am I?\rClass09 --* C3\rClass09 --|\u0026gt; Class07\rClass07 : equals()\rClass07 : Object[] elementData\rClass01 : size()\rClass01 : int chimp\rClass01 : int gorilla\rclass Class10 {\r\u0026lt;\u0026lt;service\u0026gt;\u0026gt;\rint id\rsize()\r} State diagram stateDiagram-v2\r[*] --\u0026gt; Still\rStill --\u0026gt; [*]\rStill --\u0026gt; Moving\rMoving --\u0026gt; Still\rMoving --\u0026gt; Crash\rCrash --\u0026gt; [*] will be rendered as:\nstateDiagram-v2\r[*] --\u0026gt; Still\rStill --\u0026gt; [*]\rStill --\u0026gt; Moving\rMoving --\u0026gt; Still\rMoving --\u0026gt; Crash\rCrash --\u0026gt; [*] Pie chart pie\r\u0026#34;Dogs\u0026#34; : 386\r\u0026#34;Cats\u0026#34; : 85.9\r\u0026#34;Rats\u0026#34; : 15 will be rendered as:\npie\r\u0026#34;Dogs\u0026#34; : 386\r\u0026#34;Cats\u0026#34; : 85.9\r\u0026#34;Rats\u0026#34; : 15 User Journey diagram journey\rtitle My working day\rsection Go to work\rMake tea: 5: Me\rGo upstairs: 3: Me\rDo work: 1: Me, Cat\rsection Go home\rGo downstairs: 5: Me\rSit down: 3: Me will be rendered as:\njourney\rtitle My working day\rsection Go to work\rMake tea: 5: Me\rGo upstairs: 3: Me\rDo work: 1: Me, Cat\rsection Go home\rGo downstairs: 5: Me\rSit down: 3: Me C4 diagram C4Context\rtitle System Context diagram for Internet Banking System\rPerson(customerA, \u0026#34;Banking Customer A\u0026#34;, \u0026#34;A customer of the bank, with personal bank accounts.\u0026#34;)\rPerson(customerB, \u0026#34;Banking Customer B\u0026#34;)\rPerson_Ext(customerC, \u0026#34;Banking Customer C\u0026#34;)\rSystem(SystemAA, \u0026#34;Internet Banking System\u0026#34;, \u0026#34;Allows customers to view information about their bank accounts, and make payments.\u0026#34;)\rPerson(customerD, \u0026#34;Banking Customer D\u0026#34;, \u0026#34;A customer of the bank, \u0026lt;br/\u0026gt; with personal bank accounts.\u0026#34;)\rEnterprise_Boundary(b1, \u0026#34;BankBoundary\u0026#34;) {\rSystemDb_Ext(SystemE, \u0026#34;Mainframe Banking System\u0026#34;, \u0026#34;Stores all of the core banking information about customers, accounts, transactions, etc.\u0026#34;)\rSystem_Boundary(b2, \u0026#34;BankBoundary2\u0026#34;) {\rSystem(SystemA, \u0026#34;Banking System A\u0026#34;)\rSystem(SystemB, \u0026#34;Banking System B\u0026#34;, \u0026#34;A system of the bank, with personal bank accounts.\u0026#34;)\r}\rSystem_Ext(SystemC, \u0026#34;E-mail system\u0026#34;, \u0026#34;The internal Microsoft Exchange e-mail system.\u0026#34;)\rSystemDb(SystemD, \u0026#34;Banking System D Database\u0026#34;, \u0026#34;A system of the bank, with personal bank accounts.\u0026#34;)\rBoundary(b3, \u0026#34;BankBoundary3\u0026#34;, \u0026#34;boundary\u0026#34;) {\rSystemQueue(SystemF, \u0026#34;Banking System F Queue\u0026#34;, \u0026#34;A system of the bank, with personal bank accounts.\u0026#34;)\rSystemQueue_Ext(SystemG, \u0026#34;Banking System G Queue\u0026#34;, \u0026#34;A system of the bank, with personal bank accounts.\u0026#34;)\r}\r}\rBiRel(customerA, SystemAA, \u0026#34;Uses\u0026#34;)\rBiRel(SystemAA, SystemE, \u0026#34;Uses\u0026#34;)\rRel(SystemAA, SystemC, \u0026#34;Sends e-mails\u0026#34;, \u0026#34;SMTP\u0026#34;)\rRel(SystemC, customerA, \u0026#34;Sends e-mails to\u0026#34;) will be rendered as:\nC4Context\rtitle System Context diagram for Internet Banking System\rPerson(customerA, \u0026#34;Banking Customer A\u0026#34;, \u0026#34;A customer of the bank, with personal bank accounts.\u0026#34;)\rPerson(customerB, \u0026#34;Banking Customer B\u0026#34;)\rPerson_Ext(customerC, \u0026#34;Banking Customer C\u0026#34;)\rSystem(SystemAA, \u0026#34;Internet Banking System\u0026#34;, \u0026#34;Allows customers to view information about their bank accounts, and make payments.\u0026#34;)\rPerson(customerD, \u0026#34;Banking Customer D\u0026#34;, \u0026#34;A customer of the bank, \u0026lt;br/\u0026gt; with personal bank accounts.\u0026#34;)\rEnterprise_Boundary(b1, \u0026#34;BankBoundary\u0026#34;) {\rSystemDb_Ext(SystemE, \u0026#34;Mainframe Banking System\u0026#34;, \u0026#34;Stores all of the core banking information about customers, accounts, transactions, etc.\u0026#34;)\rSystem_Boundary(b2, \u0026#34;BankBoundary2\u0026#34;) {\rSystem(SystemA, \u0026#34;Banking System A\u0026#34;)\rSystem(SystemB, \u0026#34;Banking System B\u0026#34;, \u0026#34;A system of the bank, with personal bank accounts.\u0026#34;)\r}\rSystem_Ext(SystemC, \u0026#34;E-mail system\u0026#34;, \u0026#34;The internal Microsoft Exchange e-mail system.\u0026#34;)\rSystemDb(SystemD, \u0026#34;Banking System D Database\u0026#34;, \u0026#34;A system of the bank, with personal bank accounts.\u0026#34;)\rBoundary(b3, \u0026#34;BankBoundary3\u0026#34;, \u0026#34;boundary\u0026#34;) {\rSystemQueue(SystemF, \u0026#34;Banking System F Queue\u0026#34;, \u0026#34;A system of the bank, with personal bank accounts.\u0026#34;)\rSystemQueue_Ext(SystemG, \u0026#34;Banking System G Queue\u0026#34;, \u0026#34;A system of the bank, with personal bank accounts.\u0026#34;)\r}\r}\rBiRel(customerA, SystemAA, \u0026#34;Uses\u0026#34;)\rBiRel(SystemAA, SystemE, \u0026#34;Uses\u0026#34;)\rRel(SystemAA, SystemC, \u0026#34;Sends e-mails\u0026#34;, \u0026#34;SMTP\u0026#34;)\rRel(SystemC, customerA, \u0026#34;Sends e-mails to\u0026#34;) ","permalink":"https://www.kemiaofx.cn/posts/mermaid-diagrams/","summary":"\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cp\u003eThe following are some examples of the diagrams, charts and graphs that can be made using Mermaid. Click here to jump into the \u003ca href=\"http://mermaid-js.github.io/mermaid/\"\u003efull syntax\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"flowchart\"\u003eFlowchart\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eflowchart LR\r\n\r\nA[Hard] --\u0026gt;|Text| B(Round)\r\nB --\u0026gt; C{Decision}\r\nC --\u0026gt;|One| D[Result 1]\r\nC --\u0026gt;|Two| E[Result 2]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ewill be rendered as:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-mermaid\" data-lang=\"mermaid\"\u003eflowchart LR\r\n\r\nA[Hard] --\u0026gt;|Text| B(Round)\r\nB --\u0026gt; C{Decision}\r\nC --\u0026gt;|One| D[Result 1]\r\nC --\u0026gt;|Two| E[Result 2]\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"sequence-diagram\"\u003eSequence diagram\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esequenceDiagram\r\nAlice-\u0026gt;\u0026gt;John: Hello John, how are you?\r\nloop Healthcheck\r\n    John-\u0026gt;\u0026gt;John: Fight against hypochondria\r\nend\r\nNote right of John: Rational thoughts!\r\nJohn--\u0026gt;\u0026gt;Alice: Great!\r\nJohn-\u0026gt;\u0026gt;Bob: How about you?\r\nBob--\u0026gt;\u0026gt;John: Jolly good!\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ewill be rendered as:\u003c/p\u003e","title":"Mermaid Diagrams"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries like KaTeX the one that Minima uses. Here\u0026rsquo;s what you can do in the configuration file to enable it.\nmath:\renable: false\rprovider: katex Examples The following are some examples of mathematical notations with KaTeX that are pretty much like LaTeX\u0026rsquo;s.\nBlock \\varphi = 1+\\frac{1}{1+\\frac{1}{1+\\frac{1} {1+\\cdots}}} wiil be rendered as:\n$$ \\varphi = 1+\\frac{1}{1+\\frac{1}{1+\\frac{1} {1+\\cdots}}} $$\nInline Pythagorean theorem can be written as $a^2+b^2=c^2$ where *a*, *b* and *c* are the length of legs of a triangle. will be rendered as:\nPythagorean theorem can be written as $a^2+b^2=c^2$ where a, b and c are the length of legs of a triangle.\n","permalink":"https://www.kemiaofx.cn/posts/math-typesetting/","summary":"\u003cp\u003eMathematical notation in a Hugo project can be enabled by using third party JavaScript libraries like \u003ca href=\"https://katex.org\"\u003eKaTeX\u003c/a\u003e the one that Minima uses. Here\u0026rsquo;s what you can do in the configuration file to enable it.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003emath:\r\n  enable: false\r\n  provider: katex\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cp\u003eThe following are some examples of mathematical notations with KaTeX that are pretty much like LaTeX\u0026rsquo;s.\u003c/p\u003e\n\u003ch3 id=\"block\"\u003eBlock\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\\varphi = 1+\\frac{1}{1+\\frac{1}{1+\\frac{1} {1+\\cdots}}} \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ewiil be rendered as:\u003c/p\u003e\n\u003cp\u003e$$\n\\varphi = 1+\\frac{1}{1+\\frac{1}{1+\\frac{1} {1+\\cdots}}}\n$$\u003c/p\u003e\n\u003ch3 id=\"inline\"\u003eInline\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ePythagorean theorem can be written as $a^2+b^2=c^2$ where *a*, *b* and *c* are the length of legs of a triangle.\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ewill be rendered as:\u003c/p\u003e","title":"Math Typesetting"}]